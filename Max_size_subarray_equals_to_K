#include <bits/stdc++.h>
using namespace std;

int maxSubArrayLen(vector<int>& nums, int k) {
    unordered_map<int, int> prefixSum; // Map to store prefix sum and its corresponding index
    int maxLen = 0;
    int currSum = 0;

    for (int i = 0; i < nums.size(); ++i) {
        currSum += nums[i];

        if (currSum == k) {
            maxLen = max(maxLen, i + 1);
        }

        if (prefixSum.find(currSum - k) != prefixSum.end()) {
            maxLen = max(maxLen, i - prefixSum[currSum - k]);
        }

        if (prefixSum.find(currSum) == prefixSum.end()) {
            prefixSum[currSum] = i;
        }
    }

    return maxLen;
}

int main() {
    vector<int> nums = {1, -1, 5, -2, 3};
    int k = 3;
    cout << maxSubArrayLen(nums, k) << endl;

    nums = {-2, -1, 2, 1};
    k = 1;
    cout << maxSubArrayLen(nums, k) << endl;

    return 0;
}
