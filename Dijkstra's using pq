Weighted graph
Undirected
Positive Weights
finds the path with the minimum cost from one vertex to the others in a graph
Greedy Algorithm

class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // Code here
        priority_queue <pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(V);
        for(int it=0;it<V;it++)
        {
            dist[it]=1e9;
        }
        dist[S]=0;
        pq.push({0,S});
        while(!pq.empty())
        {
            int dis=pq.top().first;
            int node=pq.top().second;
            pq.pop();
            
            for(auto it: adj[node])
            {
                int edgeweight=it[1];
                int adjnode=it[0];
                if(dis+edgeweight<dist[adjnode])
                {
                    dist[adjnode]=dis+edgeweight;
                    pq.push({dist[adjnode],adjnode});
                }
            }
        }
        return dist;
    }
};
