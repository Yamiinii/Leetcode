int MOD = 1000000007;
int findWays(vector<int>& arr, int k) {
    int n = arr.size();
    vector<vector<int>> t(n + 1, vector<int>(k + 1, 0));

    for (int i = 0; i <= n; i++) {
        for (int j = 0; j <= k; j++) {
            if (i == 0) // when array(i) is empty than there is no meaning of k of elements so return count of subset as 0;
                t[i][j] = 0;
            if (j == 0) // when k(j) is zero and there is always a chance of empty subset so return count as 1;
                t[i][j] = 1;
        }
    }

    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= k; j++) {
            if (arr[i - 1] <= j) // when element in the list is less than target k 
                t[i][j] =( t[i - 1][j - arr[i-1]] + t[i - 1][j])%MOD; // either exclude or include and add both of them to get final count 
            else
                t[i][j] = (t[i - 1][j])%MOD; // exclude when element in the list is greater than the k 
        }
    }

    return t[n][k];
}
