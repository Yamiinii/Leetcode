Dynamic graphs and  two elements same belong constant time
***********************************************************************************************************************
gfg q
int find(int A[],int X)
{
       //add code here
       if(X==A[X]) return X;
       return A[X]=find(A, A[X]);
}
void unionSet(int A[], int X, int Z) {
    // Find the representatives (parents) of sets containing elements X and Z
    int parentX = find(A, X);
    int parentZ = find(A, Z);
    
    // Make one set the child of the other (choosing Z's parent as the new parent)
    A[parentX] = parentZ;
}

***********************************************************************************************************************
class Disjointset{
    vector<int> rank,parent,size;
    public:
    Disjointset(int n)
    {
        rank.resize(n+1,0);
        size.resize(n+1,0);
        parent.resize(n+1,0);
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
        }
    }
    
    int findUpar(int node)
    {
        if(node==parent[node])
        return node;
        return parent[node]=findUpar(parent [node]);
    }
    
    void unionbyrank(int u,int v)
    {
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);
        if(ulp_u==ulp_v) return ;
        if(rank[ulp_u]<rank[ulp_v])
        parent[ulp_u]=ulp_v;
        else if(rank[ulp_v]<rank[ulp_u])
        parent[ulp_v]=ulp_u;
        else
        {
            parent[ulp_v]=ulp_u;
            rank[ulp_u]++;
        }
    }

           void unionbysize(int u,int v)
    {
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);
        if(ulp_u==ulp_v) return ;
        if(size[ulp_u]<size[ulp_v])
       { parent[ulp_u]=ulp_v;
         size[ulp_v]+=size[ulp_u];
       }
        else if(rank[ulp_v]<rank[ulp_u])
        youknow
    }
};
