class Disjointset{
    vector<int> size,parent;
    public:
    Disjointset(int n)
    {
        size.resize(n+1,0);
        parent.resize(n+1,0);
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
        }
    }
    
    int findUpar(int node)
    {
        if(node==parent[node])
        return node;
        return parent[node]=findUpar(parent [node]);
    }
    
    void unionbysize(int u,int v)
    {
        int ulp_u=findUpar(u);
        int ulp_v=findUpar(v);
        if(ulp_u==ulp_v) return ;
        if(size[ulp_u]<size[ulp_v])
       { parent[ulp_u]=ulp_v;
           size[ulp_v]+=size[ulp_v];
       }
        else {
        parent[ulp_v]=ulp_u;
             size[ulp_u]+=size[ulp_u];
        }
       
    }
};
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<pair<int,pair<int,int>>> edges;
        for(int i=0;i<V;i++)
        {
            for(auto it:adj[i])
            {
                int adjNode=it[0];
                int node=i;
                int weight=it[1];
                edges.push_back({weight,{node,adjNode}});
            }
        }
        Disjointset ds(V);
        sort(edges.begin(),edges.end());
        int wght=0;
        for(auto it:edges)
        {
            int wt=it.first;
            int u=it.second.first;
            int v=it.second.second;
            if(ds.findUpar(u)!=ds.findUpar(v))
            {
                wght+=wt;
                ds.unionbysize(u,v);
            }
        }
        return wght;
    }
